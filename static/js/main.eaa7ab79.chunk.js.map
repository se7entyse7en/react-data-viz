{"version":3,"sources":["../../src/Chart.jsx","../../src/peripherals/Title.jsx","../../src/peripherals/Axis.jsx","../../src/LineGraph.jsx","../../src/LineGraphDoubleYAxis.jsx","../../src/elements/Circle.jsx","../../src/ScatterPlot.jsx","data.js","App.js","index.js"],"names":["ChartContext","createContext","useChartDimensions","useContext","Chart","children","value","dimensions","className","width","height","transform","left","top","dimensionsPropTypes","PropTypes","margin","right","bottom","isRequired","boundedWidth","boundedHeight","completeDimensions","parseAccessor","accessor","accessorType","accessor_","d","Error","label","data-testid","dominantBaseline","textAnchor","fontSize","AXIS_POSITIONS","TOP","BOTTOM","LEFT","RIGHT","Axis","numberOfTicks","Component","dimension","scale","position","formatTick","axisPropTypes","Object","number","v","HorizontalAxis","yTranslate","labelDistance","defaultProps","VerticalAxis","xTranslate","HorizontalAxisLine","x1","y1","x2","y2","VerticalAxisLine","AxisLine","HorizontalAxisLabel","yTextTranslate","textDominantBaseline","VerticalAxisLabel","rotationCenter","x","y","HorizontalAxisTicks","VerticalAxisTicks","Ticks","ticks","tickWrapperTransformer","tick","tickLinePosition","tickTextAttrs","i","key","LineGraph","config","dimensions_","xAccessor_","yAccessor_","xScale","d3","yScale","mainConf","xAxisConf","yAxisConf","title","data","xAccessor","yAccessor","main","color","string","peripherals","Content","lineGenerator","fill","stroke","strokeWidth","LineGraphDoubleYAxis","y0Accessor_","y1Accessor_","y0Scale","y1Scale","y0AxisConf","y1AxisConf","y0Accessor","y1Accessor","y0","lineGenerator0","lineGenerator1","colors","Circle","cx","cy","r","ScatterPlot","size","row","timeseries","date","extraValue","scatter","Border","style","border","textAlign","LineGraphExample","Date","parse","axis","toISOString","split","LineGraphDoubleYAxisExample","ScatterPlotExample","App","window","innerWidth","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eaa7ab79.chunk.js","sourcesContent":["import React, { createContext, useContext } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst ChartContext = createContext();\nexport const useChartDimensions = () => useContext(ChartContext);\n\nconst Chart = ({ dimensions, children }) => (\n  <ChartContext.Provider value={dimensions}>\n    <svg className=\"Chart\" width={dimensions.width} height={dimensions.height}>\n      <g\n        transform={`translate(${dimensions.margin.left}, ${dimensions.margin.top})`}\n      >\n        {children}\n      </g>\n    </svg>\n  </ChartContext.Provider>\n);\n\nexport default Chart;\n\nexport const dimensionsPropTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  margin: PropTypes.shape({\n    top: PropTypes.number.isRequired,\n    right: PropTypes.number.isRequired,\n    bottom: PropTypes.number.isRequired,\n    left: PropTypes.number.isRequired\n  }).isRequired\n};\n\nChart.propTypes = {\n  dimensions: PropTypes.shape({\n    boundedWidth: PropTypes.number.isRequired,\n    boundedHeight: PropTypes.number.isRequired,\n    ...dimensionsPropTypes\n  }).isRequired,\n  children: PropTypes.node.isRequired\n};\n\nexport const completeDimensions = dimensions => ({\n  ...dimensions,\n  boundedWidth:\n    dimensions.width - dimensions.margin.left - dimensions.margin.right,\n  boundedHeight:\n    dimensions.height - dimensions.margin.top - dimensions.margin.bottom\n});\n\nexport const parseAccessor = accessor => {\n  const accessorType = typeof accessor;\n  const accessor_ =\n    accessorType === \"function\"\n      ? accessor\n      : accessorType === \"string\"\n      ? d => d[accessor]\n      : null;\n\n  if (!accessor) {\n    throw Error(`Invalid accessor: ${accessor}`);\n  }\n\n  return accessor_;\n};\n","import React from \"react\";\nimport { useChartDimensions } from \"../Chart\";\n\nexport default ({ label }) => {\n  const dimensions = useChartDimensions();\n\n  return (\n    <g>\n      <text\n        data-testid=\"title\"\n        transform={`translate(${dimensions.boundedWidth / 2}, -30)`}\n        dominantBaseline=\"baseline\"\n        textAnchor=\"middle\"\n        fontSize=\"150%\"\n      >\n        {label}\n      </text>\n    </g>\n  );\n};\n","import React from \"react\";\nimport { useChartDimensions } from \"../Chart\";\nimport PropTypes from \"prop-types\";\n\nexport const AXIS_POSITIONS = {\n  TOP: \"top\",\n  BOTTOM: \"bottom\",\n  LEFT: \"left\",\n  RIGHT: \"right\"\n};\n\nconst Axis = ({\n  dimension,\n  label,\n  scale,\n  position,\n  formatTick,\n  numberOfTicks\n}) => {\n  const Component =\n    dimension === \"x\"\n      ? HorizontalAxis\n      : dimension === \"y\"\n      ? VerticalAxis\n      : null;\n\n  if (!Component) {\n    return null;\n  }\n\n  return (\n    <Component\n      label={label}\n      scale={scale}\n      position={position}\n      formatTick={formatTick}\n      numberOfTicks={numberOfTicks}\n    />\n  );\n};\n\nexport default Axis;\n\nconst axisPropTypes = {\n  label: PropTypes.string,\n  scale: PropTypes.func.isRequired,\n  position: PropTypes.oneOf(Object.values(AXIS_POSITIONS)),\n  formatTick: PropTypes.func,\n  numberOfTicks: PropTypes.number\n};\n\nAxis.propTypes = {\n  dimension: PropTypes.oneOf([\"x\", \"y\"]).isRequired,\n  ...axisPropTypes\n};\n\nAxis.defaultProps = {\n  formatTick: v => v\n};\n\nexport const HorizontalAxis = ({\n  label,\n  scale,\n  position,\n  formatTick,\n  numberOfTicks\n}) => {\n  const dimensions = useChartDimensions();\n  const labelDistance = 40;\n  const yTranslate =\n    position === AXIS_POSITIONS.TOP ? 0 : dimensions.boundedHeight;\n\n  return (\n    <g data-testid=\"horizontal-axis\" transform={`translate(0, ${yTranslate})`}>\n      <HorizontalAxisLine dimensions={dimensions} />\n      <HorizontalAxisLabel\n        label={label}\n        position={position}\n        dimensions={dimensions}\n        labelDistance={labelDistance}\n      />\n      <HorizontalAxisTicks\n        scale={scale}\n        position={position}\n        formatTick={formatTick}\n        numberOfTicks={numberOfTicks}\n      />\n    </g>\n  );\n};\n\nHorizontalAxis.propTypes = axisPropTypes;\nHorizontalAxis.defaultProps = {\n  position: AXIS_POSITIONS.BOTTOM,\n  ...Axis.defaultProps\n};\n\nexport const VerticalAxis = ({\n  label,\n  scale,\n  position,\n  formatTick,\n  numberOfTicks\n}) => {\n  const dimensions = useChartDimensions();\n  const labelDistance = 40;\n  const xTranslate =\n    position === AXIS_POSITIONS.RIGHT ? dimensions.boundedWidth : 0;\n\n  return (\n    <g data-testid=\"vertical-axis\" transform={`translate(${xTranslate}, 0)`}>\n      <VerticalAxisLine dimensions={dimensions} />\n      <VerticalAxisLabel\n        label={label}\n        position={position}\n        dimensions={dimensions}\n        labelDistance={labelDistance}\n      />\n      <VerticalAxisTicks\n        scale={scale}\n        position={position}\n        formatTick={formatTick}\n        numberOfTicks={numberOfTicks}\n      />\n    </g>\n  );\n};\n\nVerticalAxis.propTypes = axisPropTypes;\nVerticalAxis.defaultProps = {\n  position: AXIS_POSITIONS.LEFT,\n  ...Axis.defaultProps\n};\n\nconst HorizontalAxisLine = ({ dimensions }) => (\n  <AxisLine\n    position={{\n      x1: -5,\n      y1: 0,\n      x2: dimensions.boundedWidth + 5,\n      y2: 0\n    }}\n  />\n);\n\nconst VerticalAxisLine = ({ dimensions }) => (\n  <AxisLine\n    position={{\n      x1: 0,\n      y1: -5,\n      x2: 0,\n      y2: dimensions.boundedHeight + 5\n    }}\n  />\n);\n\nconst AxisLine = ({ position }) => (\n  <line strokeWidth={2} fill=\"none\" stroke=\"#000000\" {...position} />\n);\n\nconst HorizontalAxisLabel = ({\n  label,\n  position,\n  dimensions,\n  labelDistance\n}) => {\n  const yTextTranslate =\n    position === AXIS_POSITIONS.TOP ? -labelDistance : labelDistance;\n  const textDominantBaseline =\n    position === AXIS_POSITIONS.TOP ? \"baseline\" : \"hanging\";\n\n  return (\n    <g>\n      <text\n        data-testid=\"horizontal-axis-label\"\n        transform={`translate(${dimensions.boundedWidth /\n          2}, ${yTextTranslate})`}\n        dominantBaseline={textDominantBaseline}\n        textAnchor=\"middle\"\n      >\n        {label}\n      </text>\n    </g>\n  );\n};\n\nconst VerticalAxisLabel = ({ label, position, dimensions, labelDistance }) => {\n  const rotationCenter =\n    position === AXIS_POSITIONS.RIGHT\n      ? {\n          x: labelDistance,\n          y: dimensions.boundedHeight - labelDistance\n        }\n      : {\n          x: -labelDistance,\n          y: dimensions.boundedHeight + labelDistance\n        };\n  const yTextTranslate =\n    position === AXIS_POSITIONS.RIGHT\n      ? dimensions.boundedHeight - labelDistance\n      : dimensions.boundedHeight + labelDistance;\n  const textDominantBaseline =\n    position === AXIS_POSITIONS.RIGHT ? \"hanging\" : \"baseline\";\n\n  return (\n    <g transform={`rotate(-90,${rotationCenter.x}, ${rotationCenter.y})`}>\n      <text\n        data-testid=\"vertical-axis-label\"\n        transform={`translate(${dimensions.boundedHeight /\n          2}, ${yTextTranslate})`}\n        dominantBaseline={textDominantBaseline}\n        textAnchor=\"middle\"\n      >\n        {label}\n      </text>\n    </g>\n  );\n};\n\nconst HorizontalAxisTicks = ({\n  scale,\n  position,\n  formatTick,\n  numberOfTicks\n}) => (\n  <Ticks\n    dimension=\"x\"\n    scale={scale}\n    position={position}\n    formatTick={formatTick}\n    numberOfTicks={numberOfTicks}\n  />\n);\n\nconst VerticalAxisTicks = ({ scale, position, formatTick, numberOfTicks }) => (\n  <Ticks\n    dimension=\"y\"\n    scale={scale}\n    position={position}\n    formatTick={formatTick}\n    numberOfTicks={numberOfTicks}\n  />\n);\n\nconst Ticks = ({ dimension, scale, position, formatTick, numberOfTicks }) => {\n  const ticks = scale.ticks(numberOfTicks);\n\n  let tickWrapperTransformer, tickLinePosition, tickTextAttrs;\n  if (dimension === \"x\") {\n    const xTranslate = position === AXIS_POSITIONS.TOP ? -7 : 7;\n    const textDominantBaseline =\n      position === AXIS_POSITIONS.TOP ? \"baseline\" : \"hanging\";\n\n    tickWrapperTransformer = tick => `translate(${scale(tick)}, 0)`;\n    tickLinePosition = { x1: 0, y1: 0, x2: 0, y2: 3 };\n    tickTextAttrs = {\n      transform: `translate(0, ${xTranslate})`,\n      dominantBaseline: textDominantBaseline,\n      textAnchor: \"middle\"\n    };\n  } else if (dimension === \"y\") {\n    const xTranslate = position === AXIS_POSITIONS.RIGHT ? 7 : -7;\n    const textAnchor = position === AXIS_POSITIONS.RIGHT ? \"start\" : \"end\";\n\n    tickWrapperTransformer = tick => `translate(0, ${scale(tick)})`;\n    tickLinePosition = { x1: -3, y1: 0, x2: 0, y2: 0 };\n    tickTextAttrs = {\n      transform: `translate(${xTranslate}, 0)`,\n      dominantBaseline: \"middle\",\n      textAnchor: textAnchor\n    };\n  } else {\n    return null;\n  }\n\n  return (\n    <g>\n      {ticks.map((tick, i) => (\n        <g key={i} transform={tickWrapperTransformer(tick)}>\n          <line\n            strokeWidth={1}\n            fill=\"none\"\n            stroke=\"#000000\"\n            {...tickLinePosition}\n          />\n          <text fontSize=\"75%\" {...tickTextAttrs}>\n            {formatTick(tick)}\n          </text>\n        </g>\n      ))}\n    </g>\n  );\n};\n","import React from \"react\";\nimport Chart, {\n  completeDimensions,\n  parseAccessor,\n  dimensionsPropTypes\n} from \"./Chart\";\nimport Title from \"./peripherals/Title\";\nimport Axis from \"./peripherals/Axis\";\nimport * as d3 from \"d3\";\nimport PropTypes from \"prop-types\";\n\nconst LineGraph = ({ data, dimensions, xAccessor, yAccessor, config }) => {\n  const dimensions_ = completeDimensions(dimensions);\n\n  const xAccessor_ = parseAccessor(xAccessor);\n  const yAccessor_ = parseAccessor(yAccessor);\n\n  const xScale = d3\n    .scaleTime()\n    .domain(d3.extent(data, xAccessor_))\n    .range([0, dimensions_.boundedWidth]);\n\n  const yScale = d3\n    .scaleLinear()\n    .domain(d3.extent(data, yAccessor_))\n    .range([dimensions_.boundedHeight, 0]);\n\n  const mainConf = config.main || {};\n  const xAxisConf = config.peripherals?.axis?.x || {};\n  const yAxisConf = config.peripherals?.axis?.y || {};\n\n  return (\n    <Chart dimensions={dimensions_}>\n      <Title label={mainConf.title} />\n      <Axis\n        dimension=\"x\"\n        label={xAxisConf.title}\n        scale={xScale}\n        formatTick={xAxisConf.formatTick}\n        numberOfTicks={xAxisConf.numberOfTicks}\n      />\n      <Axis\n        dimension=\"y\"\n        label={yAxisConf.title}\n        scale={yScale}\n        formatTick={yAxisConf.formatTick}\n        numberOfTicks={yAxisConf.numberOfTicks}\n      />\n      <Content\n        data={data}\n        xAccessor={xAccessor_}\n        yAccessor={yAccessor_}\n        xScale={xScale}\n        yScale={yScale}\n        config={mainConf}\n      />\n    </Chart>\n  );\n};\n\nexport default LineGraph;\n\nLineGraph.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  dimensions: PropTypes.shape(dimensionsPropTypes).isRequired,\n  xAccessor: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  yAccessor: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  config: PropTypes.shape({\n    main: PropTypes.shape({\n      title: PropTypes.string,\n      color: PropTypes.string\n    }),\n    peripherals: PropTypes.shape({\n      x: PropTypes.shape({\n        title: PropTypes.string,\n        formatTick: PropTypes.func,\n        numberOfTicks: PropTypes.number\n      }),\n      y: PropTypes.shape({\n        title: PropTypes.string,\n        formatTick: PropTypes.func,\n        numberOfTicks: PropTypes.number\n      })\n    })\n  })\n};\n\nLineGraph.defaultProps = {\n  xAccessor: \"x\",\n  yAccessor: \"y\",\n  config: {}\n};\n\nconst Content = ({ data, xAccessor, yAccessor, xScale, yScale, config }) => {\n  const lineGenerator = d3\n    .line()\n    .x(d => xScale(xAccessor(d)))\n    .y(d => yScale(yAccessor(d)));\n\n  return (\n    <g>\n      <path\n        data-testid=\"content\"\n        d={lineGenerator(data)}\n        fill=\"none\"\n        stroke={config.color || \"#000000\"}\n        strokeWidth={2}\n      />\n    </g>\n  );\n};\n","import React from \"react\";\nimport Chart, {\n  completeDimensions,\n  parseAccessor,\n  dimensionsPropTypes\n} from \"./Chart\";\nimport Title from \"./peripherals/Title\";\nimport Axis, { AXIS_POSITIONS } from \"./peripherals/Axis\";\nimport * as d3 from \"d3\";\nimport PropTypes from \"prop-types\";\n\nconst LineGraphDoubleYAxis = ({\n  data,\n  dimensions,\n  xAccessor,\n  y0Accessor,\n  y1Accessor,\n  config\n}) => {\n  const dimensions_ = completeDimensions(dimensions);\n\n  const xAccessor_ = parseAccessor(xAccessor);\n  const y0Accessor_ = parseAccessor(y0Accessor);\n  const y1Accessor_ = parseAccessor(y1Accessor);\n\n  const xScale = d3\n    .scaleTime()\n    .domain(d3.extent(data, xAccessor_))\n    .range([0, dimensions_.boundedWidth]);\n\n  const y0Scale = d3\n    .scaleLinear()\n    .domain(d3.extent(data, y0Accessor_))\n    .range([dimensions_.boundedHeight, 0]);\n\n  const y1Scale = d3\n    .scaleLinear()\n    .domain(d3.extent(data, y1Accessor_))\n    .range([dimensions_.boundedHeight, 0]);\n\n  const mainConf = config.main || {};\n  const xAxisConf = config.peripherals?.axis?.x || {};\n  const y0AxisConf = config.peripherals?.axis?.y0 || {};\n  const y1AxisConf = config.peripherals?.axis?.y1 || {};\n\n  return (\n    <Chart dimensions={dimensions_}>\n      <Title label={mainConf.title} />\n      <Axis\n        dimension=\"x\"\n        label={xAxisConf.title}\n        scale={xScale}\n        formatTick={xAxisConf.formatTick}\n        numberOfTicks={xAxisConf.numberOfTicks}\n      />\n      <Axis\n        dimension=\"y\"\n        label={y0AxisConf.title}\n        scale={y0Scale}\n        formatTick={y0AxisConf.formatTick}\n        numberOfTicks={y0AxisConf.numberOfTicks}\n      />\n      <Axis\n        dimension=\"y\"\n        label={y1AxisConf.title}\n        scale={y1Scale}\n        position={AXIS_POSITIONS.RIGHT}\n        formatTick={y1AxisConf.formatTick}\n        numberOfTicks={y1AxisConf.numberOfTicks}\n      />\n      <Content\n        data={data}\n        xAccessor={xAccessor_}\n        y0Accessor={y0Accessor_}\n        y1Accessor={y1Accessor_}\n        xScale={xScale}\n        y0Scale={y0Scale}\n        y1Scale={y1Scale}\n        config={mainConf}\n      />\n    </Chart>\n  );\n};\n\nexport default LineGraphDoubleYAxis;\n\nLineGraphDoubleYAxis.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  dimensions: PropTypes.shape(dimensionsPropTypes).isRequired,\n  xAccessor: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  yAccessor: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  config: PropTypes.shape({\n    main: PropTypes.shape({\n      title: PropTypes.string,\n      color: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n          y0: PropTypes.string,\n          y1: PropTypes.string\n        })\n      ])\n    }),\n    peripherals: PropTypes.shape({\n      x: PropTypes.shape({\n        title: PropTypes.string,\n        formatTick: PropTypes.func,\n        numberOfTicks: PropTypes.number\n      }),\n      y0: PropTypes.shape({\n        title: PropTypes.string,\n        formatTick: PropTypes.func,\n        numberOfTicks: PropTypes.number\n      }),\n      y1: PropTypes.shape({\n        title: PropTypes.string,\n        formatTick: PropTypes.func,\n        numberOfTicks: PropTypes.number\n      })\n    })\n  })\n};\n\nLineGraphDoubleYAxis.defaultProps = {\n  xAccessor: \"x\",\n  yAccessor: \"y\",\n  config: {}\n};\n\nconst Content = ({\n  data,\n  xAccessor,\n  y0Accessor,\n  y1Accessor,\n  xScale,\n  y0Scale,\n  y1Scale,\n  config\n}) => {\n  const lineGenerator0 = d3\n    .line()\n    .x(d => xScale(xAccessor(d)))\n    .y(d => y0Scale(y0Accessor(d)));\n\n  const lineGenerator1 = d3\n    .line()\n    .x(d => xScale(xAccessor(d)))\n    .y(d => y1Scale(y1Accessor(d)));\n\n  const colors = {\n    y0:\n      typeof config.color === \"string\"\n        ? config.color\n        : config.color.y0 || \"#000000\",\n    y1:\n      typeof config.color === \"string\"\n        ? config.color\n        : config.color.y1 || \"#000000\"\n  };\n\n  return (\n    <g>\n      <path\n        data-testid=\"content\"\n        d={lineGenerator0(data)}\n        fill=\"none\"\n        stroke={colors.y0}\n        strokeWidth={2}\n      />\n      <path\n        data-testid=\"content\"\n        d={lineGenerator1(data)}\n        fill=\"none\"\n        stroke={colors.y1}\n        strokeWidth={2}\n      />\n    </g>\n  );\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Circle = ({ cx, cy, r, color }) => (\n  <circle cx={cx} cy={cy} r={r} fill={color} />\n);\n\nexport default Circle;\n\nCircle.propTypes = {\n  cx: PropTypes.number.isRequired,\n  cy: PropTypes.number.isRequired,\n  r: PropTypes.number,\n  color: PropTypes.string\n};\n\nCircle.defaultProps = {\n  r: 5,\n  color: \"#000000\"\n};\n","import React from \"react\";\nimport Chart, {\n  completeDimensions,\n  parseAccessor,\n  dimensionsPropTypes\n} from \"./Chart\";\nimport Title from \"./peripherals/Title\";\nimport Axis from \"./peripherals/Axis\";\nimport Circle from \"./elements/Circle\";\nimport * as d3 from \"d3\";\nimport PropTypes from \"prop-types\";\n\nconst ScatterPlot = ({ data, dimensions, xAccessor, yAccessor, config }) => {\n  const dimensions_ = completeDimensions(dimensions);\n\n  const xAccessor_ = parseAccessor(xAccessor);\n  const yAccessor_ = parseAccessor(yAccessor);\n\n  const xScale = d3\n    .scaleLinear()\n    .domain(d3.extent(data, xAccessor_))\n    .range([0, dimensions_.boundedWidth]);\n\n  const yScale = d3\n    .scaleLinear()\n    .domain(d3.extent(data, yAccessor_))\n    .range([dimensions_.boundedHeight, 0]);\n\n  const mainConf = config.main || {};\n  const xAxisConf = config.peripherals?.axis?.x || {};\n  const yAxisConf = config.peripherals?.axis?.y || {};\n\n  return (\n    <Chart dimensions={dimensions_}>\n      <Title label={mainConf.title} />\n      <Axis\n        dimension=\"x\"\n        label={xAxisConf.title}\n        scale={xScale}\n        formatTick={xAxisConf.formatTick}\n        numberOfTicks={xAxisConf.numberOfTicks}\n      />\n      <Axis\n        dimension=\"y\"\n        label={yAxisConf.title}\n        scale={yScale}\n        formatTick={yAxisConf.formatTick}\n        numberOfTicks={yAxisConf.numberOfTicks}\n      />\n      <Content\n        data={data}\n        xAccessor={xAccessor_}\n        yAccessor={yAccessor_}\n        xScale={xScale}\n        yScale={yScale}\n        config={mainConf}\n      />\n    </Chart>\n  );\n};\n\nexport default ScatterPlot;\n\nScatterPlot.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  dimensions: PropTypes.shape(dimensionsPropTypes).isRequired,\n  xAccessor: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  yAccessor: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  config: PropTypes.shape({\n    main: PropTypes.shape({\n      title: PropTypes.string,\n      color: PropTypes.string,\n      size: PropTypes.number\n    }),\n    peripherals: PropTypes.shape({\n      x: PropTypes.shape({\n        title: PropTypes.string,\n        formatTick: PropTypes.func,\n        numberOfTicks: PropTypes.number\n      }),\n      y: PropTypes.shape({\n        title: PropTypes.string,\n        formatTick: PropTypes.func,\n        numberOfTicks: PropTypes.number\n      })\n    })\n  })\n};\n\nScatterPlot.defaultProps = {\n  xAccessor: \"x\",\n  yAccessor: \"y\",\n  config: {}\n};\n\nconst Content = ({ data, xAccessor, yAccessor, xScale, yScale, config }) => (\n  <g>\n    {data.map((row, i) => (\n      <Circle\n        key={i}\n        cx={xScale(xAccessor(row))}\n        cy={yScale(yAccessor(row))}\n        r={config.size}\n        color={config.color}\n      />\n    ))}\n  </g>\n);\n","const data = {\n    timeseries: [\n        {date: \"2020-01-01\", value: 10, extraValue: -15},\n        {date: \"2020-01-02\", value: 20, extraValue: -35},\n        {date: \"2020-01-03\", value: 15, extraValue: 12},\n        {date: \"2020-01-04\", value: 11, extraValue: 21},\n        {date: \"2020-01-05\", value: 100, extraValue: 66},\n        {date: \"2020-01-06\", value: 35, extraValue: -14},\n        {date: \"2020-01-07\", value: 21, extraValue: 56},\n        {date: \"2020-01-08\", value: 83, extraValue: 95},\n        {date: \"2020-01-09\", value: 53, extraValue: 43},\n        {date: \"2020-01-10\", value: 23, extraValue: 21},\n    ],\n    scatter: [\n        {x: 12, y: 53},\n        {x: 32, y: 23},\n        {x: 132, y: 12},\n        {x: 78, y: 3},\n        {x: 6, y: 98},\n        {x: 44, y: 56},\n        {x: 91, y: 26},\n        {x: 28, y: 29},\n        {x: 101, y: 37},\n        {x: 102, y: 91},\n    ],\n};\n\nexport default data;\n","import React from 'react';\n\nimport { LineGraph, LineGraphDoubleYAxis, ScatterPlot } from 'react-data-viz';\nimport data from './data';\n\nconst App = () => {\n    const dimensions = {\n        width: window.innerWidth * 0.8,\n        height: 400,\n        margin: {\n            top: 60,\n            right: 70,\n            bottom: 60,\n            left: 70\n        }\n    };\n\n    return (\n        <>\n          <LineGraphExample dimensions={dimensions}/>\n          <LineGraphDoubleYAxisExample dimensions={dimensions}/>\n          <ScatterPlotExample dimensions={dimensions} />\n        </>\n    );\n};\n\nconst Border = ({children}) => (\n    <div style={{margin: '2% 5%', border: 'solid 2px black', textAlign: 'center'}}>\n      {children}\n    </div>\n);\n\nconst LineGraphExample = ({dimensions}) => {\n    const xAccessor = d => Date.parse(d.date);\n    const yAccessor = \"value\";\n\n    const config = {\n        main: {\n            title: \"Line Graph\",\n            color: \"#3498db\"\n        },\n        peripherals: {\n            axis: {\n                x: {\n                    title: \"x-axis label\",\n                    formatTick: (v) => v.toISOString().split('T')[0],\n                    numberOfTicks: 5\n                },\n                y: {\n                    title: \"y-axis label\",\n                    numberOfTicks: 10\n                }\n            }\n        }\n    };\n\n    return (\n        <Border>\n          {data && <LineGraph\n                     data={data.timeseries} dimensions={dimensions}\n                     xAccessor={xAccessor} yAccessor={yAccessor}\n                     config={config}>\n                   </LineGraph>}\n        </Border>\n    );\n};\n\nconst LineGraphDoubleYAxisExample = ({dimensions}) => {\n    const xAccessor = d => Date.parse(d.date);\n    const y0Accessor = \"value\";\n    const y1Accessor = \"extraValue\";\n\n    const config = {\n        main: {\n            title: \"Line Graph Double y-Axis\",\n            color: {\n                y0: \"#2ecc71\",\n                y1: \"#16a085\"\n            }\n        },\n        peripherals: {\n            axis: {\n                x: {\n                    title: \"x-axis label\",\n                    formatTick: (v) => v.toISOString().split('T')[0],\n                    numberOfTicks: 5\n                },\n                y0: {\n                    title: \"y0-axis label\",\n                    numberOfTicks: 10\n                },\n                y1: {\n                    title: \"y1-axis label\",\n                    numberOfTicks: 5\n                }\n            }\n        }\n    };\n\n    return (\n        <Border>\n          {data && <LineGraphDoubleYAxis\n                     data={data.timeseries} dimensions={dimensions}\n                     xAccessor={xAccessor} y0Accessor={y0Accessor} y1Accessor={y1Accessor}\n                     config={config}>\n                   </LineGraphDoubleYAxis>}\n        </Border>\n    );\n};\n\nconst ScatterPlotExample = ({dimensions}) => {\n    const config = {\n        main: {\n            title: \"Scatter Plot\",\n            color: \"#e67e22\",\n            size: 10,\n        },\n        peripherals: {\n            axis: {\n                x: {\n                    title: \"x-axis label\",\n                    numberOfTicks: 20\n                },\n                y: {\n                    title: \"y-axis label\",\n                    numberOfTicks: 10\n                },\n            }\n        }\n    };\n\n    return (\n        <Border>\n          {data && <ScatterPlot\n                     data={data.scatter} dimensions={dimensions}\n                     config={config}>\n                   </ScatterPlot>}\n        </Border>\n    );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}